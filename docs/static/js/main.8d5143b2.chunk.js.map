{"version":3,"sources":["utils/enums.js","utils/functions.js","components/button/button.jsx","components/screen/screen.jsx","components/calculator/calculator.jsx","components/app/app.jsx","serviceWorker.js","index.js"],"names":["BUTTON_TYPES","OPERATION_TYPES","formatOperation","number1","number2","operation","undefined","toString","operationCharacter","Button","props","btnClass","btnType","btnText","btnClickHandler","className","onClick","Screen","Calculator","handleBtnNumberClick","number","state","firstNumber","setState","newFirstNumber","secondNumber","newSecondNumber","handleBtnClearClick","handleBtnOperationClick","operationResult","result","Utils","bind","id","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uWAAaA,G,MACD,UADCA,EAEE,YAFFA,EAGF,QAGEC,EACJ,IADIA,EAEC,IAFDA,EAGD,IAHCA,EAIC,IAJDA,EAKF,IALEA,EAMH,ICcH,SAASC,EAAgBC,EAASC,EAASC,GAC9C,QAAgBC,IAAZH,EACA,MAAO,GAEP,QAAkBG,IAAdD,GAA2BA,IAAcJ,EACzC,OAAOE,EAAQI,WAGf,IAAIC,EACJ,OAAQH,GACJ,KAAKJ,EACDO,EAAqB,OACrB,MACJ,KAAKP,EACDO,EAAqB,OACrB,MACJ,KAAKP,EACDO,EAAqB,IACrB,MACJ,KAAKP,EACL,QACIO,EAAqB,IAI7B,YAAgBF,IAAZF,EACOD,EAAQI,WAAa,IAAMC,EAE3BL,EAAQI,WAAa,IAAMC,EAAqB,IAAMJ,EAAQG,W,UCrBtEE,EA1BA,SAACC,GACZ,IAIIC,EAJAC,EAAUF,EAAME,QAChBC,EAAUH,EAAMG,QAChBC,EAAkBJ,EAAMI,gBAI5B,OAAQF,GACJ,KAAKZ,EACDW,EAAW,eACX,MACJ,KAAKX,EACDW,EAAW,mBACX,MACJ,KAAKX,EACL,QACIW,EAAW,gBAGnB,OACI,yBAAKI,UAAWJ,EAAUK,QAASF,GAC/B,2BAAID,KCVDI,G,MAXA,SAACP,GAEZ,IAAIL,EAAYK,EAAML,UAEtB,OACI,yBAAKU,UAAU,UACX,2BAAIV,MCEKa,E,YACjB,WAAYR,GAAQ,IAAD,8BACf,4CAAMA,KAgBVS,qBAAuB,SAACC,GAGpB,GAAI,EAAKC,MAAMhB,YAAcJ,EAEzB,QAA+BK,IAA3B,EAAKe,MAAMC,aAAyD,IAA3B,EAAKD,MAAMC,aAAgC,IAAXF,EAEzE,EAAKG,SAAS,CACVD,YAAaF,QAGd,CAEH,IAAII,EAA0C,GAAzB,EAAKH,MAAMC,YAAmBF,EACnD,EAAKG,SAAS,CACVD,YAAaE,SAMrB,QAAgClB,IAA5B,EAAKe,MAAMI,cAA2D,IAA5B,EAAKJ,MAAMI,cAAiC,IAAXL,EAC3E,EAAKG,SAAS,CACVE,aAAcL,QAEf,CACH,IAAIM,EAA4C,GAA1B,EAAKL,MAAMI,aAAoBL,EACrD,EAAKG,SAAS,CACVE,aAAcC,MA7CX,EAoDnBC,oBAAsB,WAElB,EAAKJ,SAAS,CACVD,iBAAahB,EACbmB,kBAAcnB,EACdD,UAAWJ,KAzDA,EA8DnB2B,wBAA0B,SAACvB,GACvB,OAAQA,GAEJ,KAAKJ,EAWL,KAAKA,EASL,KAAKA,OAC8BK,IAA3B,EAAKe,MAAMC,aACX,EAAKC,SAAS,CACVlB,UAAWA,IAInB,MAEJ,KAAKJ,EAGD,IAAI4B,EH/Gb,SAA0B1B,EAASC,EAASC,GAC/C,QAAgBC,IAAZH,QAAqCG,IAAZF,QAAuCE,IAAdD,GAA2BA,IAAcJ,GAAwBI,IAAcJ,EAArI,CAGI,IAAI6B,EACJ,OAAQzB,GACJ,KAAKJ,EACD6B,EAAS3B,EAAUC,EACnB,MACJ,KAAKH,EACD6B,EAAS3B,EAAUC,EACnB,MACJ,KAAKH,EACD6B,EAAS3B,EAAUC,EACnB,MACJ,KAAKH,EACL,QACI6B,EAAS3B,EAAUC,EAG3B,OAAO0B,GG2FuBC,CAAuB,EAAKV,MAAMC,YAAa,EAAKD,MAAMI,aAAc,EAAKJ,MAAMhB,gBAEjFC,IAApBuB,GAEA,EAAKN,SAAS,CACVD,YAAaO,EACbJ,kBAAcnB,EACdD,UAAWJ,IAGnB,MAGJ,KAAKA,EACL,aACmCK,IAA3B,EAAKe,MAAMC,aACX,EAAKC,SAAS,CACVlB,UAAWJ,MA9G3B,EAAKoB,MAAQ,CACTC,iBAAahB,EACbmB,kBAAcnB,EACdD,UAAWJ,GAIf,EAAKkB,qBAAuB,EAAKA,qBAAqBa,KAA1B,gBAC5B,EAAKL,oBAAsB,EAAKA,oBAAoBK,KAAzB,gBAC3B,EAAKJ,wBAA0B,EAAKA,wBAAwBI,KAA7B,gBAbhB,E,sEA6HT,IAAD,OACL,OACI,yBAAKC,GAAG,aAAalB,UAAU,cAC3B,yBAAKA,UAAU,iBACX,kBAAC,EAAD,CAAQV,UAAW0B,EAAsBG,KAAKb,MAAMC,YAAaY,KAAKb,MAAMI,aAAcS,KAAKb,MAAMhB,cAEzG,yBAAKU,UAAU,oBACX,kBAAC,EAAD,CAAQF,QAAQ,OAAID,QAASZ,EAAwBc,gBAAiB,WAAQ,EAAKc,wBAAwB3B,OAE/G,yBAAKc,UAAU,sBACX,kBAAC,EAAD,CAAQF,QAAQ,OAAID,QAASZ,EAAwBc,gBAAiB,WAAQ,EAAKc,wBAAwB3B,OAE/G,yBAAKc,UAAU,iBACX,kBAAC,EAAD,CAAQF,QAAQ,IAAID,QAASZ,EAAwBc,gBAAiB,WAAQ,EAAKc,wBAAwB3B,OAE/G,yBAAKc,UAAU,sBACX,kBAAC,EAAD,CAAQF,QAAQ,IAAID,QAASZ,EAAwBc,gBAAiB,WAAQ,EAAKc,wBAAwB3B,OAE/G,yBAAKc,UAAU,mBACX,kBAAC,EAAD,CAAQF,QAAQ,IAAID,QAASZ,EAAwBc,gBAAiB,WAAQ,EAAKc,wBAAwB3B,OAE/G,yBAAKc,UAAU,mBACX,kBAAC,EAAD,CAAQF,QAAQ,QAAQD,QAASZ,EAAoBc,gBAAiB,WAAQ,EAAKa,0BAEvF,yBAAKZ,UAAU,qBACX,kBAAC,EAAD,CAAQF,QAAQ,IAAID,QAASZ,EAAqBc,gBAAiB,WAAQ,EAAKK,qBAAqB,OAEzG,yBAAKJ,UAAU,qBACX,kBAAC,EAAD,CAAQF,QAAQ,IAAID,QAASZ,EAAqBc,gBAAiB,WAAQ,EAAKK,qBAAqB,OAEzG,yBAAKJ,UAAU,qBACX,kBAAC,EAAD,CAAQF,QAAQ,IAAID,QAASZ,EAAqBc,gBAAiB,WAAQ,EAAKK,qBAAqB,OAEzG,yBAAKJ,UAAU,qBACX,kBAAC,EAAD,CAAQF,QAAQ,IAAID,QAASZ,EAAqBc,gBAAiB,WAAQ,EAAKK,qBAAqB,OAEzG,yBAAKJ,UAAU,qBACX,kBAAC,EAAD,CAAQF,QAAQ,IAAID,QAASZ,EAAqBc,gBAAiB,WAAQ,EAAKK,qBAAqB,OAEzG,yBAAKJ,UAAU,qBACX,kBAAC,EAAD,CAAQF,QAAQ,IAAID,QAASZ,EAAqBc,gBAAiB,WAAQ,EAAKK,qBAAqB,OAEzG,yBAAKJ,UAAU,qBACX,kBAAC,EAAD,CAAQF,QAAQ,IAAID,QAASZ,EAAqBc,gBAAiB,WAAQ,EAAKK,qBAAqB,OAEzG,yBAAKJ,UAAU,qBACX,kBAAC,EAAD,CAAQF,QAAQ,IAAID,QAASZ,EAAqBc,gBAAiB,WAAQ,EAAKK,qBAAqB,OAEzG,yBAAKJ,UAAU,qBACX,kBAAC,EAAD,CAAQF,QAAQ,IAAID,QAASZ,EAAqBc,gBAAiB,WAAQ,EAAKK,qBAAqB,OAEzG,yBAAKJ,UAAU,qBACX,kBAAC,EAAD,CAAQF,QAAQ,IAAID,QAASZ,EAAqBc,gBAAiB,WAAQ,EAAKK,qBAAqB,Y,GAlLjFgB,IAAMC,WCG/BC,MAVf,WACE,OACE,yBAAKtB,UAAU,OACb,yBAAKA,UAAU,sBACb,kBAAC,EAAD,SCAYuB,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8d5143b2.chunk.js","sourcesContent":["export const BUTTON_TYPES = {\r\n    NUMBER: \"number\",\r\n    OPERATION: \"operation\",\r\n    CLEAR: \"clear\"\r\n};\r\n\r\nexport const OPERATION_TYPES = {\r\n    ADD: \"+\",\r\n    SUBTRACT: \"-\",\r\n    DIVIDE: \"/\",\r\n    MULTIPLY: \"*\",\r\n    EQUAL: \"=\",\r\n    NULL: \"0\"\r\n}","import { OPERATION_TYPES } from './enums';\r\n\r\nexport function resolveOperation(number1, number2, operation) {\r\n    if (number1 === undefined || number2 === undefined || operation === undefined || operation === OPERATION_TYPES.NULL || operation === OPERATION_TYPES.EQUAL) {\r\n        return undefined;\r\n    } else {\r\n        let result;\r\n        switch (operation) {\r\n            case OPERATION_TYPES.DIVIDE:\r\n                result = number1 / number2;\r\n                break;\r\n            case OPERATION_TYPES.MULTIPLY:\r\n                result = number1 * number2;\r\n                break;\r\n            case OPERATION_TYPES.SUBTRACT:\r\n                result = number1 - number2;\r\n                break;\r\n            case OPERATION_TYPES.ADD:\r\n            default:\r\n                result = number1 + number2;\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function formatOperation(number1, number2, operation) {\r\n    if (number1 === undefined) {\r\n        return \"\";\r\n    } else {\r\n        if (operation === undefined || operation === OPERATION_TYPES.NULL) {\r\n            return number1.toString();\r\n        } else {\r\n\r\n            let operationCharacter;\r\n            switch (operation) {\r\n                case OPERATION_TYPES.DIVIDE:\r\n                    operationCharacter = \"รท\";\r\n                    break;\r\n                case OPERATION_TYPES.MULTIPLY:\r\n                    operationCharacter = \"ร\";\r\n                    break;\r\n                case OPERATION_TYPES.SUBTRACT:\r\n                    operationCharacter = \"-\";\r\n                    break;\r\n                case OPERATION_TYPES.ADD:\r\n                default:\r\n                    operationCharacter = \"+\";\r\n                    break;\r\n            }\r\n\r\n            if (number2 === undefined) {\r\n                return number1.toString() + \" \" + operationCharacter;\r\n            } else {\r\n                return number1.toString() + \" \" + operationCharacter + \" \" + number2.toString();\r\n            }\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\n// Import the component's style\r\nimport './button.scss';\r\n\r\nimport { BUTTON_TYPES } from './../../utils/enums';\r\n\r\nconst Button = (props) => {\r\n    let btnType = props.btnType;\r\n    let btnText = props.btnText;\r\n    let btnClickHandler = props.btnClickHandler;\r\n\r\n    let btnClass;\r\n\r\n    switch (btnType) {\r\n        case BUTTON_TYPES.CLEAR:\r\n            btnClass = \"btn btnClear\";\r\n            break;\r\n        case BUTTON_TYPES.OPERATION:\r\n            btnClass = \"btn btnOperation\";\r\n            break;\r\n        case BUTTON_TYPES.NUMBER:\r\n        default:\r\n            btnClass = \"btn btnNumber\";\r\n            break;\r\n    }\r\n    return (\r\n        <div className={btnClass} onClick={btnClickHandler}>\r\n            <p>{btnText}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\n\r\n// Import the component's style\r\nimport './screen.scss';\r\n\r\nimport { BUTTON_TYPES } from './../../utils/enums';\r\n\r\nconst Screen = (props) => {\r\n    \r\n    let operation = props.operation;\r\n    \r\n    return (\r\n        <div className=\"screen\">\r\n            <p>{operation}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Screen;","import React from 'react';\r\n\r\n// Import the component's style\r\nimport './calculator.scss';\r\n\r\n// We need to import this enum too\r\nimport { BUTTON_TYPES, OPERATION_TYPES } from './../../utils/enums';\r\n\r\n// And the Utils\r\nimport * as Utils from './../../utils/functions';\r\n\r\n// And the sub components\r\nimport Button from './../button/button';\r\nimport Screen from './../screen/screen';\r\n\r\nexport default class Calculator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // We need to define the state's properties but undefined\r\n        this.state = {\r\n            firstNumber: undefined,\r\n            secondNumber: undefined,\r\n            operation: OPERATION_TYPES.NULL\r\n        }\r\n\r\n        // And bind the handlers!\r\n        this.handleBtnNumberClick = this.handleBtnNumberClick.bind(this);\r\n        this.handleBtnClearClick = this.handleBtnClearClick.bind(this);\r\n        this.handleBtnOperationClick = this.handleBtnOperationClick.bind(this);\r\n    }\r\n\r\n    // Now let's code the handler of the number buttons\r\n    handleBtnNumberClick = (number) => {\r\n\r\n        // If we are typing the first number (since no operation has been defined)...\r\n        if (this.state.operation === OPERATION_TYPES.NULL) {\r\n            // If first number is undefined or zero\r\n            if (this.state.firstNumber === undefined || (this.state.firstNumber === 0 && number !== 0)) {\r\n                // We can override it with our new number\r\n                this.setState({\r\n                    firstNumber: number\r\n                });\r\n            // If first number was already written\r\n            } else {\r\n                // We add this new digit\r\n                let newFirstNumber = this.state.firstNumber * 10 + number;\r\n                this.setState({\r\n                    firstNumber: newFirstNumber\r\n                });\r\n            }\r\n        // If we are typing the second number\r\n        } else {\r\n            // We do exactly the same check that we did for the first number\r\n            if (this.state.secondNumber === undefined || (this.state.secondNumber === 0 && number !== 0)) {\r\n                this.setState({\r\n                    secondNumber: number\r\n                });\r\n            } else {\r\n                let newSecondNumber = this.state.secondNumber * 10 + number;\r\n                this.setState({\r\n                    secondNumber: newSecondNumber\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    // This is the handler for the Clear button\r\n    handleBtnClearClick = () => {\r\n        // It justs resets the state to the initial one\r\n        this.setState({\r\n            firstNumber: undefined,\r\n            secondNumber: undefined,\r\n            operation: OPERATION_TYPES.NULL\r\n        });\r\n    }\r\n\r\n    // This is the handler for our operation buttons\r\n    handleBtnOperationClick = (operation) => {\r\n        switch (operation) {\r\n            // If we want to divide\r\n            case OPERATION_TYPES.DIVIDE:\r\n                // And first number is defined\r\n                if (this.state.firstNumber !== undefined) {\r\n                    // We add the divide operation to our state\r\n                    this.setState({\r\n                        operation: operation\r\n                    });\r\n                }\r\n\r\n                break;\r\n            // The same happens with multiply\r\n            case OPERATION_TYPES.MULTIPLY:\r\n                if (this.state.firstNumber !== undefined) {\r\n                    this.setState({\r\n                        operation: operation\r\n                    });\r\n                }\r\n\r\n                break;\r\n            // And subtract\r\n            case OPERATION_TYPES.SUBTRACT:\r\n                if (this.state.firstNumber !== undefined) {\r\n                    this.setState({\r\n                        operation: operation\r\n                    });\r\n                }\r\n\r\n                break;\r\n            // The Equal operation is an special case\r\n            case OPERATION_TYPES.EQUAL:\r\n                // Since it only happens at the end (once we wrote the second number)\r\n                // So we resolve the operation\r\n                let operationResult = Utils.resolveOperation(this.state.firstNumber, this.state.secondNumber, this.state.operation);\r\n                // And if we could\r\n                if (operationResult !== undefined) {\r\n                    // Update the state with the result\r\n                    this.setState({\r\n                        firstNumber: operationResult,\r\n                        secondNumber: undefined,\r\n                        operation: OPERATION_TYPES.NULL\r\n                    });\r\n                }\r\n                break;\r\n            // With the Add operation is equal than Subtract, Divide and Multiply ones\r\n            // Except we specify the operation element, since we also catch here the default case\r\n            case OPERATION_TYPES.ADD:\r\n            default:\r\n                if (this.state.firstNumber !== undefined) {\r\n                    this.setState({\r\n                        operation: OPERATION_TYPES.ADD\r\n                    })\r\n                }\r\n                ;\r\n                break;\r\n        }\r\n    }\r\n\r\n    // Now the render function\r\n    // I used a CSS grid for this (each cell is defined as 'wrapper')\r\n    // And inside of them I add the components\r\n    render() {\r\n        return (\r\n            <div id=\"calculator\" className=\"calculator\">\r\n                <div className=\"screenWrapper\">\r\n                    <Screen operation={Utils.formatOperation(this.state.firstNumber, this.state.secondNumber, this.state.operation)} />\r\n                </div>\r\n                <div className=\"btnDivideWrapper\">\r\n                    <Button btnText=\"รท\" btnType={BUTTON_TYPES.OPERATION} btnClickHandler={() => { this.handleBtnOperationClick(OPERATION_TYPES.DIVIDE) }} />\r\n                </div>\r\n                <div className=\"btnMultiplyWrapper\">\r\n                    <Button btnText=\"ร\" btnType={BUTTON_TYPES.OPERATION} btnClickHandler={() => { this.handleBtnOperationClick(OPERATION_TYPES.MULTIPLY) }} />\r\n                </div>\r\n                <div className=\"btnAddWrapper\">\r\n                    <Button btnText=\"+\" btnType={BUTTON_TYPES.OPERATION} btnClickHandler={() => { this.handleBtnOperationClick(OPERATION_TYPES.ADD) }} />\r\n                </div>\r\n                <div className=\"btnSubtractWrapper\">\r\n                    <Button btnText=\"-\" btnType={BUTTON_TYPES.OPERATION} btnClickHandler={() => { this.handleBtnOperationClick(OPERATION_TYPES.SUBTRACT) }} />\r\n                </div>\r\n                <div className=\"btnEqualWrapper\">\r\n                    <Button btnText=\"=\" btnType={BUTTON_TYPES.OPERATION} btnClickHandler={() => { this.handleBtnOperationClick(OPERATION_TYPES.EQUAL) }} />\r\n                </div>\r\n                <div className=\"btnClearWrapper\">\r\n                    <Button btnText=\"Clear\" btnType={BUTTON_TYPES.CLEAR} btnClickHandler={() => { this.handleBtnClearClick() }} />\r\n                </div>\r\n                <div className=\"btnNumber1Wrapper\">\r\n                    <Button btnText=\"1\" btnType={BUTTON_TYPES.NUMBER} btnClickHandler={() => { this.handleBtnNumberClick(1) }} />\r\n                </div>\r\n                <div className=\"btnNumber2Wrapper\">\r\n                    <Button btnText=\"2\" btnType={BUTTON_TYPES.NUMBER} btnClickHandler={() => { this.handleBtnNumberClick(2) }} />\r\n                </div>\r\n                <div className=\"btnNumber3Wrapper\">\r\n                    <Button btnText=\"3\" btnType={BUTTON_TYPES.NUMBER} btnClickHandler={() => { this.handleBtnNumberClick(3) }} />\r\n                </div>\r\n                <div className=\"btnNumber4Wrapper\">\r\n                    <Button btnText=\"4\" btnType={BUTTON_TYPES.NUMBER} btnClickHandler={() => { this.handleBtnNumberClick(4) }} />\r\n                </div>\r\n                <div className=\"btnNumber5Wrapper\">\r\n                    <Button btnText=\"5\" btnType={BUTTON_TYPES.NUMBER} btnClickHandler={() => { this.handleBtnNumberClick(5) }} />\r\n                </div>\r\n                <div className=\"btnNumber6Wrapper\">\r\n                    <Button btnText=\"6\" btnType={BUTTON_TYPES.NUMBER} btnClickHandler={() => { this.handleBtnNumberClick(6) }} />\r\n                </div>\r\n                <div className=\"btnNumber7Wrapper\">\r\n                    <Button btnText=\"7\" btnType={BUTTON_TYPES.NUMBER} btnClickHandler={() => { this.handleBtnNumberClick(7) }} />\r\n                </div>\r\n                <div className=\"btnNumber8Wrapper\">\r\n                    <Button btnText=\"8\" btnType={BUTTON_TYPES.NUMBER} btnClickHandler={() => { this.handleBtnNumberClick(8) }} />\r\n                </div>\r\n                <div className=\"btnNumber9Wrapper\">\r\n                    <Button btnText=\"9\" btnType={BUTTON_TYPES.NUMBER} btnClickHandler={() => { this.handleBtnNumberClick(9) }} />\r\n                </div>\r\n                <div className=\"btnNumber0Wrapper\">\r\n                    <Button btnText=\"0\" btnType={BUTTON_TYPES.NUMBER} btnClickHandler={() => { this.handleBtnNumberClick(0) }} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\n// Import the style of this component\r\nimport './app.scss';\r\n\r\n// And also the calculator component\r\nimport Calculator from './../calculator/calculator';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"calculator-wrapper\">\r\n        <Calculator />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' }\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/sass/index.scss';\r\nimport App from './components/app/app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}