{"version":3,"sources":["components/weather/weather.jsx","components/cloudsBackground/cloudsBackground.jsx","utils/functions.js","components/app/app.jsx","serviceWorker.js","index.js"],"names":["Weather","city","country","temperature","humidity","description","error","className","id","Math","floor","CloudsBackground","props","getCityTimeWithTimezone","offset","d","Date","utc","getTime","getTimezoneOffset","apiKey","Title","Form","onWeather","onSubmit","e","type","name","placeholder","App","state","undefined","getWeather","a","async","preventDefault","currentTarget","elements","value","fetch","apiCall","json","data","main","sys","weather","timezone","city_hour","Utils","getHours","console","log","setState","temp","message","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f70936ef.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport './weather.scss';\r\n\r\n// This will be a function that given the necessary weather data\r\n// will return a JSX object to display it\r\nconst Weather = ({\r\n  city,\r\n  country,\r\n  temperature,\r\n  humidity,\r\n  description,\r\n  error\r\n}) => {\r\n  return (\r\n    <>\r\n    {city && country && temperature && \r\n      <div className=\"weatherContainer\">\r\n      <div id=\"card\" className={\"card day\"}>\r\n        <div id=\"temp\" className=\"text\">{Math.floor(temperature)}</div>\r\n        <div id=\"cloudy\" className=\"cloudy\">\r\n          <div className=\"cloud\"></div>\r\n          <div className=\"sol\"></div>\r\n        </div>\r\n        <div id=\"clear\" className=\"clear\">\r\n          <div className=\"sol\"></div>\r\n        </div>\r\n        <div id=\"rainy\" className=\"rainy\">\r\n          <div className=\"cloud\">\r\n            <div className=\"rain\"></div>\r\n            <div className=\"rain\"></div>\r\n            <div className=\"rain\"></div>\r\n            <div className=\"rain\"></div>\r\n          </div>\r\n        </div>\r\n        <div id=\"storm\" className=\"storm\">\r\n          <div className=\"cloud\">\r\n            <div className=\"rain\"></div>\r\n            <div className=\"rain\"></div>\r\n            <div className=\"rain\"></div>\r\n            <div className=\"rain\"></div>\r\n          </div>\r\n        </div>\r\n        <div id=\"haze\" className=\"haze\">\r\n          <div className=\"cloud\"></div>\r\n        </div>\r\n      </div>\r\n      <div id=\"city\" className=\"city\">{city+\", \"+country}</div>\r\n    </div>}\r\n    </>\r\n  );\r\n  /*return (\r\n    <div className=\"weatherInfo\">\r\n      {city && country && (\r\n        <p className=\"weatherKey\">\r\n          Location:{\" \"}\r\n          <span className=\"weatherValue\">\r\n            {\" \"}\r\n            {city}, {country}\r\n          </span>\r\n        </p>\r\n      )}\r\n\r\n      {temperature && (\r\n        <p className=\"weatherKey\">\r\n          Temperature: <span className=\"weatherValue\"> {temperature}</span>\r\n        </p>\r\n      )}\r\n\r\n      {humidity && (\r\n        <p className=\"weatherKey\">\r\n          Humidity: <span className=\"weatherValue\"> {humidity} </span>\r\n        </p>\r\n      )}\r\n\r\n      {description && (\r\n        <p className=\"weatherKey\">\r\n          Condition: <span className=\"weatherValue\"> {description}</span>\r\n        </p>\r\n      )}\r\n\r\n      {error && <p className=\"weatherError\">{error}</p>}\r\n    </div>\r\n  );*/\r\n};\r\nexport default Weather;","import React from \"react\";\r\n\r\n// Don't forget to import the style of the component!\r\nimport './cloudsBackground.scss';\r\n\r\n// This will be the component to display the moving clouds\r\n// At the top of the app\r\nconst CloudsBackground = (props) => {\r\n    return (\r\n        <div id=\"clouds\">\r\n            <div className={\"cloud x1\"}></div>\r\n            <div className={\"cloud x2\"}></div>\r\n            <div className={\"cloud x3\"}></div>\r\n            <div className={\"cloud x4\"}></div>\r\n            <div className={\"cloud x5\"}></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CloudsBackground;","export function getCityTimeWithTimezone(offset){\r\n\r\n    // offset var must be in minutes\r\n    // (The API we are using gives it in seconds)\r\n    offset = offset / 60;\r\n\r\n    // We create a Date object for our current location\r\n    let d = new Date();\r\n\r\n    // Now we convert it to msec, then subtract local time zone offset\r\n    // SO we get the UTC time in msec\r\n    let utc = d.getTime() + (d.getTimezoneOffset() * 60000);\r\n\r\n    // We have to create a new Date object for the city we want its current hour\r\n    // And we use the supplied offset (offset)\r\n    let nd = new Date(utc + (3600000*offset));\r\n\r\n    // And return it!\r\n    return nd;\r\n}","import React from \"react\";\r\n// Let's import the weather component\r\nimport Weather from \"./../weather/weather\";\r\n\r\n// And import the CloudsBackground component\r\nimport CloudsBackground from \"./../cloudsBackground/cloudsBackground\";\r\n\r\n// And the component's style\r\nimport \"./app.scss\";\r\n\r\n// Of course, import the Utils!\r\nimport * as Utils from \"./../../utils/functions\";\r\n\r\n// This is the API key used to get the weather data\r\nconst apiKey = \"8ddceeacaf8b95fe943c88fc8389dee0\";\r\n\r\nconst Title = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"title-container__title\">Weather Finder in ReactJS!</h1>\r\n      <h3 className=\"title-container__subtitle\">\r\n        Find the current weather in any city!\r\n      </h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Form = ({ onWeather }) => {\r\n  return (\r\n    <form onSubmit={e => onWeather(e)}>\r\n      <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n      <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n      <button className=\"form-button\">Get Weather!</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nclass App extends React.Component {\r\n  // We have to set an 'undefined' initial state\r\n  // meanwhile we get the weather's data\r\n  state = {\r\n    temperature: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    error: undefined\r\n  };\r\n\r\n  // With this function we will send a request to the API\r\n  // and format the response to fit our state\r\n  // Using async!!\r\n  getWeather = async e => {\r\n    e.preventDefault();\r\n    const city = e.currentTarget.elements.city.value;\r\n    const country = e.currentTarget.elements.country.value;\r\n\r\n    // If a city and country have been specified by the user\r\n    if (city && country) {\r\n      try {\r\n        // Note: We have to use cors-anywhere since it enables\r\n        // cross-origin requests to anywhere\r\n        const apiCall = await fetch(\r\n          `https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiKey}&units=metric`\r\n        );\r\n\r\n        // We parse the response\r\n        const data = await apiCall.json();\r\n        const { main, sys, name, weather, timezone } = data;\r\n\r\n        const city_hour = Utils.getCityTimeWithTimezone(timezone).getHours();\r\n        console.log(\"Hour: \"+city_hour);\r\n\r\n        console.log(data);\r\n        // And assign the parsed data to our state\r\n        this.setState({\r\n          temperature: main.temp,\r\n          city: name,\r\n          country: sys.country,\r\n          humidity: main.humidity,\r\n          description: weather[0].description,\r\n          error: \"\"\r\n        });\r\n      } catch (ex) {\r\n        console.log(ex.message);\r\n      }\r\n      // If no city and country have been specified by the user\r\n    } else {\r\n      // Just set our state data empty\r\n      this.setState({\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        error: \"please enter a valid values.\"\r\n      });\r\n    }\r\n  };\r\n\r\n  // Now let's code the render function for this component\r\n  render() {\r\n\r\n    // Remeber I use <> and </> to create an empty root element\r\n    return (\r\n      <>\r\n        <CloudsBackground />\r\n        <div className=\"wrapper\">\r\n          <div className=\"main\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"title-container\">\r\n                  <Title />\r\n                </div>\r\n                <div className=\"form-container\">\r\n                  <Form onWeather={this.getWeather} />\r\n                  <Weather\r\n                    temperature={this.state.temperature}\r\n                    city={this.state.city}\r\n                    country={this.state.country}\r\n                    humidity={this.state.humidity}\r\n                    description={this.state.description}\r\n                    error={this.state.error}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/sass/index.scss';\r\nimport App from './components/app/app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}